import java.io.*;
import java.util.*;
import java.util.function.*;

public class DB2
{

  class Relation
  {
	String name;
	int cols;
	int rows;
	String[] attributes;
	String[][] tuples;

  public Relation()
  {
	  
  }

  public Relation(String filename)
  {
	Scanner in = null;
	try
	{
		in = new Scanner(new File(filename));
	}
	catch (FileNotFoundException e)
	{
		System.err.println(filename + " not found.");
		System.exit(1);
	}
	String[] terms = in.nextLine().split("\t");
	name = terms[0];
	cols = Integer.parseInt(terms[1]);
	rows = Integer.parseInt(terms[2]);
	attributes = new String[cols];
	tuples = new String[rows][cols];
	terms = in.nextLine().split("\t");
	for (int c = 0; c < cols; c++)
		attributes[c] = terms[c];
	for (int r = 0; r < rows; r++)
	{
		terms = in.nextLine().split("\t");
		for (int c = 0; c < cols; c++)
			tuples[r][c] = terms[c];
	}
	in.close();
  }

  public void showRelation()
  {
	System.out.println(name + "\t" + cols + "\t" + rows);
	System.out.print(attributes[0]);
	for (int c = 1; c < cols; c++)
		System.out.print("\t" + attributes[c]);
	System.out.println();
	for (int r = 0; r < rows; r++){
		System.out.print(tuples[r][0]);
		for (int c = 1; c < cols; c++)
			System.out.print("\t" + tuples[r][c]);
		System.out.println();
	}
  }

  public Relation project(String... attrs)
  {
	int[] colIndex = new int[attrs.length];
	for (int c = 0; c < attrs.length; c++)
	{
		int j = 0;
		for (; j < cols; j++)
			if (attrs[c].equals(attributes[j]))
				break;
		if (j == cols)
		{ 
			System.err.println("attribute " + attrs[c] + " not found.");
			System.exit(1);
		}
		colIndex[c] = j;
	}
	Relation PR = new Relation();
	PR.cols = attrs.length;
	PR.name = "project(" + name;
	for (int c = 0; c < PR.cols; c++)
		PR.name += "," + attrs[c];
	PR.name += ")";
	PR.rows = rows;
	PR.attributes = new String[PR.cols];
	for (int c = 0; c < PR.cols; c++)
		PR.attributes[c] = attrs[c];
	PR.tuples = new String[rows][PR.cols];
	for (int r = 0; r < rows; r++)
		for (int c = 0; c < PR.cols; c++)
			PR.tuples[r][c] = tuples[r][colIndex[c]];
	return PR;
  }

  public Relation select(Function<String[], Boolean> condition)
  {
	Relation SR = new Relation();
	SR.cols= cols;
	SR.name = "select(" + name + ",condition)";
	int[] selected = new int[rows];
	int n = 0;
	for (int r = 0; r < rows; r++)
		if(condition.apply(tuples[r]))
			selected[n++] = r;
	SR.rows = n;
	SR.attributes = new String[cols];
	for (int c = 0; c < cols; c++)
		SR.attributes[c] = attributes[c];
	SR.tuples = new String[SR.rows][cols];
	for (int r = 0; r < SR.rows; r++)
		for (int c = 0; c < cols; c++)
			SR.tuples[r][c] = tuples[selected[r]][c];
	return SR;
  }

  public Relation intersection(Relation other)
  {
	if (cols != other.cols)
		return null;
	boolean[] intersects = new boolean[rows];
	int newRows = 0;
	for (int r = 0; r < rows; r++){
		int r1 = 0;
		for (; r1 < other.rows; r1++)
		{
			int c = 0;
			for (; c < cols; c++)
				if (!tuples[r][c].equals(other.tuples[r1][c]))
					break;
			if (c == cols)
				break;
		}
		intersects[r] = r1 < other.rows;
		if (intersects[r])
			newRows++;
	}
	Relation R = new Relation();
	R.name = name + " n " + other.name;
	R.cols = cols;
	R.rows = newRows;
	R.attributes = new String[cols];
	for (int c = 0; c < cols; c++)
		R.attributes[c] = attributes[c];
	R.tuples = new String[R.rows][cols];
	int n = 0;
	for (int r = 0; r < rows; r++)
		if (intersects[r])
		{
		for (int c = 0; c < cols; c++)
			R.tuples[n][c] = tuples[r][c];
		n++;
	}
	return R;
 }

  public Relation union(Relation other)
  {
	if (cols != other.cols)
		return null;
	boolean[] intersects = new boolean[rows];
	int newRows = other.rows;
	for (int r = 0; r < rows; r++)
	{
		int r1 = 0;
		for (; r1 < other.rows; r1++)
		{
			int c = 0;
			for (; c < cols; c++)
				if (!tuples[r][c].equals(other.tuples[r1][c]))
					break;
			if (c == cols)
				break;
		}
		intersects[r] = r1 < other.rows;
		if (!intersects[r])
			newRows++;
	}
	Relation R = new Relation();
	R.name = name + " u " + other.name;
	R.cols = cols;
	R.rows = newRows;
	R.attributes = new String[cols];
	for (int c = 0; c < cols; c++) R.attributes[c] = attributes[c];
	R.tuples = new String[R.rows][cols];
	for (int r = 0; r < other.rows; r++)
		for (int c = 0; c < cols; c++)
			R.tuples[r][c] = other.tuples[r][c];
	int n = other.rows;
	for (int r = 0; r < rows; r++)
		if (!intersects[r])
		{
		for (int c = 0; c < cols; c++)
			R.tuples[n][c] = tuples[r][c];
		n++;
	}
	return R;
 }

  public Relation difference(Relation other)
  {
	if (cols != other.cols)
		return null;
	boolean[] intersects = new boolean[rows];
	int newRows = rows;
	for (int r = 0; r < rows; r++)
	{
		int r1 = 0;
		for (; r1 < other.rows; r1++)
		{
			int c = 0; for (; c < cols; c++)
				if (!tuples[r][c].equals(other.tuples[r1][c]))
					break;
			if (c == cols)
				break;
		}
		intersects[r] = r1 < other.rows;
		if (intersects[r])
			newRows--;
	}
	Relation R = new Relation();
	R.name = name + " - " + other.name;
	R.cols = cols;
	R.rows = newRows;
	R.attributes = new String[cols];
	for (int c = 0; c < cols; c++) R.attributes[c] = attributes[c];
	R.tuples = new String[R.rows][cols];
	int n = 0;
	for (int r = 0; r < rows; r++)
		if (!intersects[r])
		{
		for (int c = 0; c < cols; c++)
			R.tuples[n][c] = tuples[r][c];
		n++;
	}
	return R;
 }

 public Relation unique(){   // remove duplicate tuples
	boolean[] intersects = new boolean[rows];
	int newRows = 0;
	for (int r = 0; r < rows; r++)
	{
		int r1 = 0; for (; r1 < r; r1++)
		{
			int c = 0; for (; c < cols; c++)
				if (!tuples[r][c].equals(tuples[r1][c]))
					break;
			if (c == cols) break;
		}
		intersects[r] = r1 < r;
		if (!intersects[r]) newRows++;
	}
	Relation R = new Relation();
	R.name = name + ".uniq";
	R.cols = cols;
	R.rows = newRows;
	R.attributes = new String[cols];
	for (int c = 0; c < cols; c++) R.attributes[c] = attributes[c];
	R.tuples = new String[R.rows][cols];
	int n = 0;
	for (int r = 0; r < rows; r++) if (!intersects[r]){
		for (int c = 0; c < cols; c++) R.tuples[n][c] = tuples[r][c];
		n++;
	}
	return R;
  }

public Relation naturalJoin(Relation product) {
	// TODO Auto-generated method stub
	return null;
}
 };

  void algebra(){
	Relation Product = new Relation("Product.txt");
	Relation PC = new Relation("PC.txt");
	Relation Laptop = new Relation("Laptop.txt");
	Relation Printer = new Relation("Printer.txt");
//	Relation R1 = PC.project("model", "speed").union(Laptop.project("model", "speed"));
	Relation R2 = PC.select(r -> Double.parseDouble(r[1]) >= 3.00).project("model");
 	R2.showRelation();
 	Relation R3 = Product.select(j -> (j[0]).equals("B")).project("model");
 	R3.showRelation();
 	Relation R4 = Printer.select(j -> (j[1]).equals("true")).project("model");
 	R4.showRelation();
 	Relation R1 = Laptop.select(j -> Integer.parseInt(j[3]) >= 100).project("model");
// 	R1.showRelation();
 	Relation R8 = R1.naturalJoin(Product).project("maker", "model");
 	R8.showRelation();
// 	Relation R6 = Product.select(j -> (j[1]) in R1).project("maker");
// 	R7.showRelation();
  }	

  public static void main(String[] args){
	DB2 db2 = new DB2();
	db2.algebra();
  }
}
